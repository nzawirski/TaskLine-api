---
openapi: 3.0.0
info:
  version: 0.1.0
  title: TaskLine
  description: Project management app
servers:
  - url: http://localhost:3001
    description: Local server
  - url: https://nz-taskline-api.herokuapp.com/
    description: Heroku server

paths:
  /api/login:
    post:
        tags:
          - Login
        summary: Login
        requestBody:
          content:
            application/json:
              schema:
                required:
                  - email
                  - password
                properties:
                  email:
                    type: string
                  password:
                    type: string
        responses:
          '200': 
            description: Logged in succesfully
            content:
              application/json:
                schema: 
                  type: object
                  properties: 
                    token: 
                      type: string
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoic3RyaW5nIiwiaWQiOiI1ZGFiODA1NjI3ZDYyMDE0MTQxMzBhOGQiLCJpYXQiOjE1NzE1NzEwOTd9.dNADXPhAwg7lc8St8SktJ63VsIIBB2vM5k8hzxLzSlE
          '400': 
            $ref: '#/components/responses/BadRequestError'
          '404': 
            $ref: '#/components/responses/NotFoundError'
          
  /api/me:
    get:
      tags: 
        - Me
      summary: Returns user currently logged in
      responses:
        '200': 
          description: A User object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404': 
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Me
      summary: Edit a user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200': 
          description: A User object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404': 
          $ref: '#/components/responses/NotFoundError'

  /api/me/profilePic:
    put:
      tags:
        - Me
      summary: Change Profile Picture
      requestBody:
          content:
            multipart/form-data:
              schema:
                properties:
                  image:
                    type: file
      responses:
        '200': 
          description: A User object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Me
      summary: Delete current Profile Picture
      responses:
        '200': 
          description: Picture deleted or there was no picture in the beginning
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
          $ref: '#/components/responses/NotFoundError'

  /api/users:
    get:
      tags: 
        - Users
      summary: Returns a list of all users
      responses:
        '200': 
          description: Array os User objects
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Register a user
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201': 
          description: User registered
        '400': 
          $ref: '#/components/responses/BadRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
  
  /api/users/{_id}:
    get:
      tags: 
        - Users
      summary: Returns single user
      parameters:
        - name: _id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: A User object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '404': 
            $ref: '#/components/responses/NotFoundError'

  /api/projects/:
    get:
      tags:
        - Projects 
      summary: Returns projects of currently logged in user
      responses:
        '200': 
          description: An array of Project objects
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404': 
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Projects
      summary: Add a project
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201': 
          description: Created Project object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/projects/{_id}:
    get:
      tags:
        - Projects
      summary: Returns single Project
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: A Project object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
          $ref: '#/components/responses/NotFoundError'

    put:
      tags: 
        - Projects
      summary: Edit a Project
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '200': 
          description: A Project object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
            $ref: '#/components/responses/NotFoundError'
    delete:
      tags: 
        - Projects
      summary: Delete a Project
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: Project Deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
            $ref: '#/components/responses/NotFoundError'

  /api/projects/{_id}/tasks:
    post:
      tags:
        - Projects
      summary: Add Task to a Project
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
      responses:
        '201': 
          description: Created Task object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/projects/{_id}/members:
    post:
      tags:
        - Projects
      summary: Add Member to a Project
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - newUser
              properties:
                newUser:
                  type: string
                  description: user id
      responses:
        '201': 
          description: Project object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/projects/{_id}/members/{_memberID}:
    get:
      tags:
        - Members
      summary: Returns single Member
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
        - name: _memberID
          in: path
          description: Mebership ID (NOT user ID)
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: A Member object
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: 
        - Members
      summary: Edit a Member
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
        - name: _memberID
          in: path
          description: Mebership ID (NOT user ID)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - role
              properties:
                role:
                  type: string
      responses:
        '200': 
          description: A Project object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
            $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Members
      summary: Removes Member from Project
      parameters:
        - name: _id
          in: path
          description: Project ID
          required: true
          schema:
            type: string
        - name: _memberID
          in: path
          description: Mebership ID (NOT user ID)
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: Member removed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
          $ref: '#/components/responses/NotFoundError'

  /api/tasks/{_id}:
    get:
      tags:
        - Tasks
      summary: Returns single Task
      parameters:
        - name: _id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: A Task object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: 
        - Tasks
      summary: Edit a Task
      parameters:
        - name: _id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
                status:
                  type: string
      responses:
        '200': 
          description: A Task object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
            $ref: '#/components/responses/NotFoundError'
    delete:
      tags: 
        - Tasks
      summary: Delete a Task
      parameters:
        - name: _id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: Task Deleted
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404': 
            $ref: '#/components/responses/NotFoundError'

  /api/tasks/{_id}/users:
    post:
      tags:
        - Tasks
      summary: Assign/Dismiss a User to/from a Task
      parameters:
        - name: _id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - assignee
              properties:
                assignee:
                  type: string
                  description: user id
      responses:
        '201': 
          description: Project object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 5da0ff5a9d4a231ad0c9996a
        username:
          type: string
        email:
          type: string
        create_date:
          type: string
          example: "2019-10-01T18:44:43.886Z"
        profile_pic:
          type: string

    Password:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        password:
          type: string

    Project:
      type: object
      properties:
        _id:
          type: string
          example: 5da0ff5a9d4a231ad0c9996a
        name:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        members:
          type: array
          items:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/User"
              role:
                type: string
                example: admin
        create_date:
          type: string
          example: "2019-10-01T18:44:43.886Z"
        latestActivity:
          type: string
          example: "2019-10-01T18:44:43.886Z"
        isAdmin:
          type: boolean

    Task:
      type: object
      properties:
        _id:
          type: string
          example: 5da0ff5a9d4a231ad0c9996a
        name:
          type: string
        description:
          type: string
        due_date:
          type: string
          example: "2019-10-01T18:44:43.886Z"
        added_by:
          $ref: "#/components/schemas/User"
        assigned_users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        parent_project:
          $ref: "#/components/schemas/Project"
        status:
          type: string
          example: In progress
        create_date:
          type: string
          example: "2019-10-01T18:44:43.886Z"

  securitySchemes:
    JWT token:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequestError: #400
      description: Bad request format or required parameter is missing
    ForbiddenError: #401
      description: User is not allowed to have access to this resource
    UnauthorizedError: #403
      description: Access token is missing or invalid
    NotFoundError: #404
      description: Item not found
    ConflictError: #409
      description: Resorce already exists

security:
  - JWT token: []
